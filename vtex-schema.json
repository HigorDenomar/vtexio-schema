{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "http://example.com/example.json",
  "type": "object",
  "patternProperties": {
    "^rich-text#[A-Za-z0-9.-]": {
      "$id": "#/properties/rich-text",
      "type": "object",
      "required": [
        "props"
      ],
      "properties": {
        "props": {
          "$id": "#/properties/rich-text/properties/props",
          "type": "object",
          "properties": {
            "font": {
              "type": [
                "string",
                "object"
              ],
              "description": "achyon token to be used as font. Default: t-body",
              "properties": {
                "desktop": {
                  "type": "string"
                },
                "tablet": {
                  "type": "string"
                },
                "mobile": {
                  "type": "string"
                }
              }
            },
            "textColor": {
              "type": "string",
              "description": "Tachyon token to be used as text color. Default: c-on-base"
            },
            "text": {
              "type": "string",
              "description": "Text written in markdown language to be displayed."
            },
            "textAlignment": {
              "type": "string",
              "enum": [
                "LEFT",
                "CENTER",
                "RIGHT"
              ]
            },
            "textPosition": {
              "type": "string",
              "enum": [
                "LEFT",
                "CENTER",
                "RIGHT"
              ]
            },
            "blockClass": {
              "$ref": "#/$defs/blockClass"
            }
          }
        }
      }
    },
    "^image#[A-Za-z0-9.-]": {
      "$id": "#/properties/image",
      "type": "object",
      "required": [
        "props"
      ],
      "properties": {
        "title": {
          "$ref": "#/$defs/title"
        },
        "props": {
          "$id": "#/properties/image/properties/props",
          "type": "object",
          "required": [
            "src"
          ],
          "properties": {
            "alt": {
              "$id": "#/properties/image/properties/props/properties/alt",
              "type": "string",
              "description": "Alternate text for the image."
            },
            "link": {
              "$id": "#/properties/image/properties/props/properties/link",
              "type": "object",
              "description": "The image hyperlink.",
              "properties": {
                "attributeNofollow": {
                  "$id": "#/properties/image/properties/props/properties/link/properties/attributeNofollow",
                  "type": "boolean",
                  "description": "Guides the search engine not to track the link of the page indicated by the tag. If true sets rel=noFollow attribute to the link.",
                  "default": true
                },
                "newTab": {
                  "$id": "#/properties/image/properties/props/properties/link/properties/newTab",
                  "type": "boolean",
                  "description": "If true opens a new tab when you click on the image.",
                  "default": true
                },
                "url": {
                  "$id": "#/properties/image/properties/props/properties/link/properties/url",
                  "type": "string",
                  "description": "Sets the URL to which the user will be redirected by clicking on the image."
                }
              },
              "required": [
                "url"
              ]
            },
            "maxHeight": {
              "$id": "#/properties/image/properties/props/properties/maxHeight",
              "type": "number",
              "description": "Max height of the image."
            },
            "maxWidth": {
              "$id": "#/properties/image/properties/props/properties/maxWidth",
              "type": "number",
              "description": "Max width of the image."
            },
            "sizes": {
              "$id": "#/properties/image/properties/props/properties/sizes",
              "type": "string",
              "description": "Different image sizes for each page layout."
            },
            "src": {
              "$id": "#/properties/image/properties/props/properties/src",
              "type": "string",
              "description": "Source URL of the image."
            },
            "srcSet": {
              "$id": "#/properties/image/properties/props/properties/srcSet",
              "type": "string",
              "description": "URL of the image to use in different situations."
            },
            "title": {
              "$id": "#/properties/image/properties/props/properties/title",
              "type": "string",
              "description": "Image title displayed on hover"
            },
            "blockClass": {
              "$ref": "#/$defs/blockClass"
            }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": true
    },
    "^link#[A-Za-z0-9.-]": {
      "$id": "#/properties/link",
      "type": "object",
      "required": [
        "props"
      ],
      "properties": {
        "title": {
          "$ref": "#/$defs/title"
        },
        "props": {
          "$id": "#/properties/link/properties/props",
          "type": "object",
          "required": [
            "href"
          ],
          "dependencies": {
            "buttonProps": [
              "displayMode"
            ]
          },
          "properties": {
            "label": {
              "$id": "#/properties/link/properties/props/properties/label",
              "type": "string",
              "description": "Link text."
            },
            "href": {
              "$id": "#/properties/link/properties/props/properties/href",
              "type": "string",
              "description": "Link URL.",
              "default": "#"
            },
            "scrollTo": {
              "$id": "#/properties/link/properties/props/properties/scrollTo",
              "type": "string",
              "description": "Element anchor to scroll after navigation. (E.g. \"#footer\")"
            },
            "target": {
              "$id": "#/properties/link/properties/props/properties/target",
              "type": "string",
              "enum": [
                "_blank",
                "_self",
                "_parent",
                "_top"
              ],
              "description": "Where to display the linked URL. This prop works the same way as the target from HTML <a> element. Since the anchor element's target default is _self, this prop will be set to _self if it's undefined."
            },
            "displayMode": {
              "$id": "#/properties/link/properties/props/properties/displayMode",
              "type": "string",
              "enum": [
                "anchor",
                "button"
              ],
              "description": "How the link should be displayed. Possible values are: anchor (displays a normal link with no styles) or button (displays a button that can be customized using the buttonProps prop."
            },
            "buttonProps": {
              "$id": "#/properties/link/properties/props/properties/buttonProps",
              "type": "object",
              "description": "How the link button should be displayed. Use this prop only when the displayMode prop is set as button.",
              "properties": {
                "variant": {
                  "$id": "#/properties/link/properties/props/properties/buttonProps/properties/variant",
                  "type": "string",
                  "enum": [
                    "primary",
                    "secondary"
                  ],
                  "description": "Link button visual proeminence."
                },
                "size": {
                  "$id": "#/properties/link/properties/props/properties/buttonProps/properties/size",
                  "type": "string",
                  "enum": [
                    "small",
                    "regular",
                    "large"
                  ],
                  "description": "Link button size."
                }
              }
            },
            "escapeLinkRegex": {
              "$id": "#/properties/link/properties/props/properties/escapeLinkRegex",
              "type": "string",
              "description": "RegExp, with global match, used to remove special characters within product specifications."
            },
            "rel": {
              "$id": "#/properties/link/properties/props/properties/rel",
              "type": "string",
              "description": "This prop specifies the relationship between the current document and the linked document (for better SEO). This prop works the same way as the rel attribute from <a>, the HTML anchor element."
            },
            "blockClass": {
              "$ref": "#/$defs/blockClass"
            }
          }
        }
      }
    },
    "flex-layout.row#[A-Za-z0-9.-]": {
      "type": "object",
      "required": [
        "children"
      ],
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "properties": {
            "borderColor": {
              "type": "string",
              "description": "The color of the border."
            },
            "borderWidth": {
              "type": "number",
              "description": "A number or string magnitude for the bw Tachyons token to be applied to the row."
            },
            "border": {
              "type": [
                "string",
                "array"
              ],
              "description": "An array to define in which sides of the row a border should be applied to (top, right, bottom, left or all).",
              "items": {
                "type": "string",
                "enum": [
                  "top",
                  "right",
                  "bottom",
                  "left"
                ]
              }
            },
            "colGap": {
              "type": "number",
              "description": "A number or string magnitude for the pr Tachyons token to be applied to columns inside of the flex-layout.row."
            },
            "colSizing": {
              "type": "string",
              "description": "Controls the width of the columns inside the flex-layout.row.",
              "enum": [
                "equal",
                "auto"
              ]
            },
            "fullWidth": {
              "type": "boolean",
              "description": "Whether or not the component should ocuppy all the available width from its parent."
            },
            "horizontalAlign": {
              "type": "string",
              "description": "Controls horizontal alignment for the items inside the flex-layout.row.",
              "enum": [
                "left",
                "right",
                "center"
              ]
            },

            "marginBottom": {
              "type": "number",
              "description": "A number or string magnitude for the mb Tachyons token to be applied to the row."
            },
            "marginTop": {
              "type": "number",
              "description": "A number or string magnitude for the mt Tachyons token to be applied to the row."
            },
            "paddingBottom": {
              "type": "number",
              "description": "A number or string magnitude for the pb Tachyons token to be applied to the row."
            },
            "paddingTop": {
              "type": "number",
              "description": "A number or string magnitude for the pt Tachyons token to be applied to the row."
            },
            "preserveLayoutOnMobile": {
              "type": "boolean",
              "description": "Whether or not the flex-layout.row should break into a column layout on mobile."
            },
            "preventHorizontalStretch": {
              "type": "boolean",
              "description": "Prevents the row from stretching horizontally to fill its parent width."
            },
            "preventVerticalStretch": {
              "type": "boolean",
              "description": "Prevents the row from stretching vertically to fill its parent height with items-stretch token."
            },
            "rowGap": {
              "type": "number",
              "description": "A number or string magnitude for the pb Tachyons token to be applied to columns inside of the flex-layout.row."
            },
            "blockClass": {
              "$ref": "#/$defs/blockClass"
            }
          }
        }
      }
    },
    "flex-layout.col#[A-Za-z0-9.-]": {
      "type": "object",
      "required": [
        "children"
      ],
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "properties": {
            "borderColor": {
              "type": "string",
              "description": "The color of the border."
            },
            "borderWidth": {
              "type": "number",
              "description": "A number or string magnitude for the bw Tachyons token to be applied to the row."
            },
            "border": {
              "type": [
                "string",
                "array"
              ],
              "description": "An array to define in which sides of the row a border should be applied to (top, right, bottom, left or all).",
              "items": {
                "type": "string",
                "enum": [
                  "top",
                  "right",
                  "bottom",
                  "left"
                ]
              }
            },
            "horizontalAlign": {
              "type": "string",
              "description": "Controls horizontal alignment for the items inside the flex-layout.row.",
              "enum": [
                "left",
                "right",
                "center"
              ]
            },

            "marginLeft": {
              "type": "number",
              "description": "A number or string magnitude for the mb Tachyons token to be applied to the row."
            },
            "marginRight": {
              "type": "number",
              "description": "A number or string magnitude for the mt Tachyons token to be applied to the row."
            },
            "paddingLeft": {
              "type": "number",
              "description": "A number or string magnitude for the pb Tachyons token to be applied to the row."
            },
            "paddingRight": {
              "type": "number",
              "description": "A number or string magnitude for the pt Tachyons token to be applied to the row."
            },
            "preventVerticalStretch": {
              "type": "boolean",
              "description": "Prevents the row from stretching vertically to fill its parent height with height: 100%, using height: \"auto\" instead."
            },
            "rowGap": {
              "type": "number",
              "description": "A number or string magnitude for the pb Tachyons token to be applied to rows inside of the flex-layout.col."
            },
            "verticalAlign": {
              "type": "string",
              "description": "Controls vertical alignment for the items inside the flex-layout.col.",
              "enum": [
                "top",
                "middle",
                "bottom"
              ]
            },
            "width": {
              "type": "string",
              "description": "Sets the width of the column. Accepts either a percentage or \"grow\"."
            },
            "blockClass": {
              "$ref": "#/$defs/blockClass"
            }
          }
        }
      }
    },
    "^responsive-layout.(desktop)|(mobile)|(tablet)|(phone)#[A-Za-z0-9.-]": {
      "type": "object",
      "required": [
        "children"
      ],
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "$defs": {
    "blockClass": {
      "description": "Block container class. This prop’s set value functions as a block identifier for CSS customizations.",
      "type": [
        "string",
        "array"
      ],
      "items": {
        "type": "string"
      }
    },
    "title": {
      "type": "string"
    }
  }
}